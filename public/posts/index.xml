<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Adam Parker&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Adam Parker&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Apr 2020 22:04:54 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dotnet Interop:- C# and F#</title>
      <link>http://localhost:1313/posts/7-dotnet-interop-cs-fs/</link>
      <pubDate>Wed, 29 Apr 2020 22:04:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/7-dotnet-interop-cs-fs/</guid>
      <description>What makes F# special? In the Dotnet world, F# stand out as being the Functional based language. This might sound strange, and I on’t have time to go into the full difference between Function and Object-Oriented languages and paradigms here, please do a google if you wish to learn more.&#xA;Some of the main features of F# that are relevant to this series are as follows:-&#xA;Higher Order Functions Modules Records Sequences Discriminated Unions Options I put them in this order for a reason.</description>
    </item>
    <item>
      <title>Dotnet Interop:-  C# and Visual Basic</title>
      <link>http://localhost:1313/posts/6-dotnet-interop-cs-vb/</link>
      <pubDate>Wed, 01 Apr 2020 20:47:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/6-dotnet-interop-cs-vb/</guid>
      <description>This is Part 1 in my series of Blog Posts on DotNet interop.&#xA;Why Visual Basic? I decided to use visual basic as my first way to show Interop as C# and Visual Basic both share the same programming paradigm of object orientation.&#xA;A sample of the languages! Below I have snippets of two classes which are mirrors of each other in both Visual Basic and C#.&#xA;Visual Basic C# (Those more astute of you will have notice Visual Basic’s superiority with a lack of Semi-Colons and Brackets …)</description>
    </item>
    <item>
      <title>Dotnet  Interop</title>
      <link>http://localhost:1313/posts/5-dotnet-interop/</link>
      <pubDate>Sat, 29 Feb 2020 19:38:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/5-dotnet-interop/</guid>
      <description>What is DotNet? DotNet is a whole stack. It can get very confusing when talking about .NET and what it is. The main part which actually makes all of the following possible is the .NET runtime.&#xA;What this runtime is in simple terms, is a layer which takes the compiled code, and runs it on the machine. It managed to do this as it reads what is know as Intermediate Language (IL) and translates this to be ran natively on the machine.</description>
    </item>
    <item>
      <title>Xamarin Shell for Web Developers</title>
      <link>http://localhost:1313/posts/4-xamarin-shell-for-web-developers/</link>
      <pubDate>Mon, 27 Jan 2020 17:18:40 +0100</pubDate>
      <guid>http://localhost:1313/posts/4-xamarin-shell-for-web-developers/</guid>
      <description>Coming from web development, I have become very used to and familiar with the MVC architecture for development. It allows for good decoupling of components and also allows for excellent use of Dependency Injection (DI). Having moved to start teaching myself mobile app development through Xamarin Forms , I found the view centric approach to navigation very odd and strange. It was tightly coupled to the framework and I spent hours trying to come up with the perfect navigation service that was generic enough to use.</description>
    </item>
    <item>
      <title>Can contributing to open source be easy?</title>
      <link>http://localhost:1313/posts/2-contributing-to-open-source/</link>
      <pubDate>Sun, 16 Jun 2019 23:38:30 +0100</pubDate>
      <guid>http://localhost:1313/posts/2-contributing-to-open-source/</guid>
      <description>A very leading question in the title and the answer is, of course! Nobody said you had to commit code to be part of an open source project, many people commit changes to documentation and this is where my second open source pull request(PR)/ commit lies. I was recently working on a project which is using the Prism Library (https://github.com/PrismLibrary)&#xD;, a MVVM Framework for Xamarin Forms and WPF (Windows Presentation Foundation).</description>
    </item>
    <item>
      <title>My First Open Source Pull Request</title>
      <link>http://localhost:1313/posts/1-my-first-pull-request/</link>
      <pubDate>Thu, 30 May 2019 09:03:20 -0800</pubDate>
      <guid>http://localhost:1313/posts/1-my-first-pull-request/</guid>
      <description>I always thought open source would be a scary world and the start of it was. I was shown a nice little website named First Timers Only ( https://www.firsttimersonly.com/&#xD;), and this was my entry point. This lead me to the UpForGrabs page and I started filtering by what I knew, .NET. (Yes I skipped first contributions, if I don’t know how to do a pull request after working in industry for a year, I may be in the wrong profession)</description>
    </item>
    <item>
      <title>Remove Cached Report Data Ssrs</title>
      <link>http://localhost:1313/posts/3-remove-cached-report-data-ssrs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/3-remove-cached-report-data-ssrs/</guid>
      <description>I was working with a SQL Server Reporting Services (SSRS) Report the other day and found myself trying to work with some data changes while writing the report to ensure the report was behaving as expected. Initially, nothing on the report changed even though I had changed the data, I found this odd and thought I might’ve been pointing at the wrong database. After a bit of googling, I found that report data get cached after the first run of previewing a report.</description>
    </item>
  </channel>
</rss>
