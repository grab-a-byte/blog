[{"categories":null,"content":"So over the last couple of posts, we’ve looked at what does work well in C# from F#, and most of it seems to go pretty smoothly. But there are occasions where the languages refuse to play nice with each other. That’s what we’ll be discussing in this final post.\nOptions Option in F# are a way to get around the idea of null by providing two ‘sub-types’ called Some and None. Imagine trying to parse an Int from a String, if you provide a valid string such as “42”, it succeeds and the method should return Some(42), if you provided a invalid string, it may return none to indicate that it has indeed failed. An example being as follows:\nlet parseInt x = match System.Int32.TryParse(x) with | success, result when success -\u0026gt; Some(result) | _ -\u0026gt; None When consuming this from C#, you get a FSharpOption type (which I believe is in FSharpCore.dll) and you get access to a particular property called Value. If you succeeded and managed to return the Some type, this will have the value it succeeded in getting (42 in the above example), however if it returns None, C# interprets this as null and as such, you lose the safety that comes from using Options in F# and still will be required to insert null checks from that point forward. E.g.\nvar integerOption = FunctionalParadims.parseInt(\u0026#34;42\u0026#34;); var val = integerOption.Value; //val is 42 var integerOption2 = FunctionalParadigms.parseInt(\u0026#34;Blah Blah Blah\u0026#34;); // integerOption2 is null var val2 = integerOption.Value //Throws null reference excpetion F# Lists F# has the idea of a list however, this differs from the C# type of List. This can cause confusion however the FSharpCore.dll comes to the rescue again as it allows CSharp to consume a FSharpList type. This does taint the C# code however and this is something you may wish to avoid. To avoid importing the F# DLL (or nuget package) into your project, the F# lists implement IReadOnlyCollection which is in System.Collection.Generic and as such is normal to\nlet getAList() = [1;2;3] IReadOnlyCollection\u0026lt;int\u0026gt; list = FunctionalParadigms.getAList(); Discriminated Unions I know I already said Discriminated Unions work well in the last part so why am I re-covering them? Well there is one case where DU’s don’t play nice in C# and that is if you don’t provide a type or an integer on the methods and have it ‘raw’\ntype Animal = | Dog | Cat | Parrot In this situation, it creates a bunch of “Tags” which you either need to switch on, if else, or some other method. The class and an example of their usage is down below.\npublic sealed class Animal : IEquatable\u0026lt;Animal\u0026gt;, IStructuralEquatable, IComparable\u0026lt;Animal\u0026gt;, IComparable, IStructuralComparable { public static class Tags { public const int Dog = 0; public const int Cat = 1; public const int Parrot = 2; } public int Tag { get; } public static Animal Dog { get; } public bool IsDog { get; } public static Animal Cat { get; } public bool IsCat { get; } public static Animal Parrot { get; } public bool IsParrot { get; } public override string ToString(); public sealed int CompareTo(Animal obj); public sealed int CompareTo(object obj); public sealed int CompareTo(object obj, IComparer comp); public sealed int GetHashCode(IEqualityComparer comp); public sealed override int GetHashCode(); public sealed bool Equals(object obj, IEqualityComparer comp); } private static void SwitchingOnNoTypeDUs() { Animal animal = Animal.Cat; switch (animal.Tag) { case Animal.Tags.Dog: Console.WriteLine(\u0026#34;dog\u0026#34;); break; case Animal.Tags.Cat: Console.WriteLine(\u0026#34;cat\u0026#34;); // prints cat break; case Animal.Tags.Parrot: Console.WriteLine(\u0026#34;polly want a cracker\u0026#34;); break; default: throw new ArgumentOutOfRangeException(); } } The final part of this post is something that baffles me beyond belief but is unfortunately true. The one thing I found that doesn’t work well in the C# realms.\nFunctions Yes. As a functional language, in F# you pass functions into functions and get functions returned from functions and it works a charm. Trying to pass a function from C#, not so friendly. My first thought when trying to do so was the following.\nSay I have a function in F# like so :\nlet doAsStringFunction stringFunc = stringFunc \u0026#34;Something\u0026#34; Quite simple, takes in a function that takes a string and returns the result of that function on the word “Something”. I tried to call it like this:\nFunctionalParadigms.doAStringFunction\u0026lt;int\u0026gt;((x) =\u0026gt; x.Length()); Which to me seems logical but this doesn’t work. I will now present the actual solution and end this post before I start rambling beyond compare.\nFunctionalParadigms.doAStringFunction(FSharpFunc\u0026lt;string, int\u0026gt;.FromConverter((x) =\u0026gt; x.Length)); ","permalink":"https://example.org/posts/9-dotnet-interop-cs-fs-pt3/","tags":["Dotnet Interop","csharp","visual basic"],"title":"Dotnet Interop: C# and F# Pt. 3"},{"categories":null,"content":"Continuing on from where we left off last time, we will try to cover off the rest of F#’s features that play really well and simply when being consumed from a C# codebase.\nValues F# can have values places directly inside modules, almost ‘global’ values in the module. See an example below :-\nmodule FunctionalParadigms let aNumber = 5 As we know from the last post, modules expose themselves as static classes in C#. As such, this value just becomes a static readonly property of that static class. As such, C# can consume it as follows.\nvar num = FunctionalParadigms.aNumber; Functions Functions are quite core to F# and functional programming in case you hadn’t guessed. So surely they should be easy enough to consume from C#? The answer here is kind of, if you stick with using types as parameters and not pass around functions (which is normal in F#). The following example takes a string and returns its length (very trivial I know)\nmodule FunctionalParadigms = let aFunction (string:string) = string.Length It is consumed by C# as a static function on a static class :-\nvar strLength = FunctionalParadigms.aFunction(\u0026#34;Thing\u0026#34;); // Returns 5 Sequences F# uses a lot of sequences. It is exposed to C# using the IEnumerable interface and as such can be treated as one without any issues.\nDiscriminated Union Discriminated Unions in F# are a ‘choice type’. They act in slightly different ways depending on how they are used. if we define one of them using integers, It will compile down to a C# enum type. And example is as follows :-\ntype LogLevels = | Error = 1 | Warning = 2 | Info = 3 Compiles sown to C# as this :-\npublic enum LogLevels { Error = 1, Warning = 2, Info = 3 } However, if we use any types within the Discriminated Union, it will create almost ‘factory functions’ for the sub-types. For Example:\ntype OtherLogLevels = | Error of int | Warning of struct(int * string) | Info of string Gets the following interface in C#:\npublic abstract class OtherLogLevels : IEquatable\u0026lt;OtherLogLevels\u0026gt;, IStructuralEquatable, IComparable\u0026lt;OtherLogLevels\u0026gt;, IComparable, IStructuralComparable { public bool IsInfo { get; } public bool IsWarning { get; } public bool IsError { get; } public int Tag { get; } public static OtherLogLevels NewError(int item); public static OtherLogLevels NewInfo(string item); public static OtherLogLevels NewWarning((int, string) item); public sealed override int CompareTo(OtherLogLevels obj); public sealed override int CompareTo(object obj); public sealed override int CompareTo(object obj, IComparer comp); public sealed override bool Equals(object obj); public sealed override bool Equals(object obj, IEqualityComparer comp); public sealed override bool Equals(OtherLogLevels obj); public sealed override int GetHashCode(); public sealed override int GetHashCode(IEqualityComparer comp); public override string ToString(); public static class Tags { public const int Error = 0; public const int Warning = 1; public const int Info = 2; } public class Warning : OtherLogLevels { public (int, string) Item { get; } } public class Error : OtherLogLevels { public int Item { get; } } public class Info : OtherLogLevels { public string Item { get; } } } Unit As F# hates the idea of null, it has a special type called unit. however, this means it effectively becomes interchangeable. If a F# function receives a unit, you will likely pass a null. And if a Unit is the return type from a F# function, in C# it interops as returning void. Simples.\nArrays I don’t have anything clever to say here. It’s an array…\nConclusion This bring me to the end of the “works really well” section of these blog posts. Next post will still be in the F# – C# Interop space, but will focus on thing that work… with few work-arounds.\n","permalink":"https://example.org/posts/8-dotnet-interop-cs-fs-pt2/","tags":["Dotnet Interop","csharp","visual basic"],"title":"Dotnet Interop: C# and F# Pt. 2"},{"categories":null,"content":"What makes F# special? In the Dotnet world, F# stand out as being the Functional based language. This might sound strange, and I on’t have time to go into the full difference between Function and Object-Oriented languages and paradigms here, please do a google if you wish to learn more.\nSome of the main features of F# that are relevant to this series are as follows:-\nHigher Order Functions Modules Records Sequences Discriminated Unions Options I put them in this order for a reason. This is the list I will be discussing and showing how the Dotnet runtime allows these two languages of different paradigms to happily (in most cases) work together.\nModules and Namespaces Lets start with Namespaces, while F# can use namespaces, it will normally use Modules. However, if you decide to add a namespace declaration to the top of your F# file, when you reference the output library in your C# project, you will notice no difference when importing the namespace, you still use ‘using FSharp.Namespace’, or whatever you called your library.\nSo why bother with Modules at all? Firstly, Modules are more in line with the way F# has been built up and as such, you will find it used in most F# libraries instead, we can still use these Modules in C#.\nWhen a Module is imported, it represents itself as a static class in C#. This allows for seamless usage between F# and C# code on both sides as in F#, we use ‘open’ statements on C# imports.\nFor example, this code here:\nnamespace FSharpClassLib module FunctionalParadigms = let aNumber = 5 type x = | One | Two Can be used in a C# console app as follows:\nusing FSharpClassLib; namespace CSharpConsole { class Program { static void Main(string[] args) { var test = FunctionalParadigms.aNumber; } } } Above, you also see an example of standalone values being used from F# in C#. again simply showing itself as a static field.\nRecords In F#, “Records represent simple aggregates of named values, optionally with members. They can either be structs or reference types. They are reference types by default.” . That seems like a mouthful, and basically it means, it’s an object that holds a combination of values. In C# terms, it’s effectively a class with a bunch of properties on it. Whilst that sounds simple, something to know about F# is it uses Structural Equality and by default, it’s data structures are Immutable. For those unfamiliar with these terms, they are as follows:\nStructural Equality : A object is equal if all it’s properties match and not if it is the same reference in memory. Immutable : The object cannot change over time. With these defined, it may come as no surprise that to instantiate a F# record in C#, you use an ‘All Arguments Constructor’. This guarantees known values, it also allows the Properties consumed by C# to be read only and s such, keep in line with the Immutability aspect of F#.\nThe Structural Equality also get implemented by default even on the C# side. So using a record made in F#, and using\nvar a = new Thing(1, true); var b = new Thing(1, true); in C#, the objects a and b are equal.\nTo how this in action here’s a simple F# Record\nnamespace FSharpClassLib module FunctionalParadigms = type TypeTwo = { isTrue : bool SomeNumber: double } It is used in a C# Console App as follows:\nusing FSharpClassLib; using System; namespace CSharpConsole { class Program { static void Main(string[] args) { var a = new FunctionalParadigms.TypeTwo(true, 1.1); var b = new FunctionalParadigms.TypeTwo(true, 1.1); Console.WriteLine(a.Equals(b)); // This prints True! Console.ReadKey(); } } } And when decompiled, shows the following\npublic sealed class TypeTwo : IEquatable\u0026lt;TypeTwo\u0026gt;, IStructuralEquatable, IComparable\u0026lt;TypeTwo\u0026gt;, IComparable, IStructuralComparable { public TypeTwo(bool isTrue, double someNumber); [CompilationMapping(SourceConstructFlags.Field, 0)] public bool isTrue { get; } [CompilationMapping(SourceConstructFlags.Field, 1)] public double SomeNumber { get; } [CompilerGenerated] public sealed override int CompareTo(TypeTwo obj); [CompilerGenerated] public sealed override int CompareTo(object obj); [CompilerGenerated] public sealed override int CompareTo(object obj, IComparer comp); [CompilerGenerated] public sealed override bool Equals(object obj, IEqualityComparer comp); [CompilerGenerated] public sealed override bool Equals(TypeTwo obj); [CompilerGenerated] public sealed override bool Equals(object obj); [CompilerGenerated] public sealed override int GetHashCode(IEqualityComparer comp); [CompilerGenerated] public sealed override int GetHashCode(); [CompilerGenerated] public override string ToString(); } Neat huh?\nI think this should be enough information for now, however, in the next post we will continue exploring this interaction between the two languages and how it plays well together.\nAny questions comment below or feel free to use the contact me page.\nSee you next time!\n","permalink":"https://example.org/posts/7-dotnet-interop-cs-fs/","tags":["Dotnet Interop","csharp","visual basic"],"title":"Dotnet Interop:- C# and F#"},{"categories":null,"content":"This is Part 1 in my series of Blog Posts on DotNet interop.\nWhy Visual Basic? I decided to use visual basic as my first way to show Interop as C# and Visual Basic both share the same programming paradigm of object orientation.\nA sample of the languages! Below I have snippets of two classes which are mirrors of each other in both Visual Basic and C#.\nVisual Basic C# (Those more astute of you will have notice Visual Basic’s superiority with a lack of Semi-Colons and Brackets …)\nSo How Do We Get Started Both of the above classes were created in their relevant .NET Standard lib file from Visual Studio. Once these have been created and compiled, you will end up with a DLL file inside of the respecting ‘bin’ folders of each project. If these are in individual Solutions and compiled completely separately, you would need to copy this file over to the project you wish to use it in (say copy the Visual Basic DLL to a C# Console App), add a reference (using brose for file), and voila! That all that’s required, you can now use the Visual Basic code just like C# code as shown in the below example.\nIf you didn’t know any better, you may assume that you were using a standard C# library!\nTo prove this point further, I have also created an Example that uses the popular C# Library Newtonsoft.JSON inside of a Visual Basic Project.\nAgain, as simple as adding the NuGet Package and using it. Rather spectacular if you ask me.\nWhat if I can’t be bothered to copy files? There is another point to be made here, if you are writing both in the same solution, you can add both projects to a solution file and Visual Studio is clever enough to compile both separately as well as allow you to link. I can’t imagine a scenario where you would want to do this (except for demo purposes) but it is cool this feature exists.\nOne small caveat with the above is that if you are using the VB Class Library in the C# console project and you update the VB Class Library, you will need to rebuild it before the changes are picked up by visual studio as usable in the C# project.\nI am yet to find anything in VB which cannot be used in C# but I have only used VB a small amount and have kept it simple for this example, I would love to hear if nayone has found anything which causes complications and any question, feel free to ask and I will try to answer.\nThanks for reading!\n","permalink":"https://example.org/posts/6-dotnet-interop-cs-vb/","tags":["Dotnet Interop","csharp","visual basic"],"title":"Dotnet Interop:-  C# and Visual Basic"},{"categories":null,"content":"What is DotNet? DotNet is a whole stack. It can get very confusing when talking about .NET and what it is. The main part which actually makes all of the following possible is the .NET runtime.\nWhat this runtime is in simple terms, is a layer which takes the compiled code, and runs it on the machine. It managed to do this as it reads what is know as Intermediate Language (IL) and translates this to be ran natively on the machine. This combination of IL and Runtime allow for some rather interesting things, and in this series of posts, we’ll be talking about Interoperability (Interop for short).\nWhat is Interop? If you Google DotNet interop and open the first page, it’s likely Microsoft Documentation which states the following :-\n“Interoperability enables you to preserve and take advantage of existing investments in unmanaged code. Code that runs under the control of the common language runtime (CLR) is called managed code, and code that runs outside the CLR is called unmanaged code. COM, COM+, C++ components, ActiveX components, and Microsoft Windows API are examples of unmanaged code.”\nI personally find this a mouthful and confusing and as such I simply prefer to think of it as using libraries from other languages that can run in the CLR (which runs on the runtime, I never said .NET made any sense).\nFuture plans So, with the above said and done. I’m here to announce a small series I will be doing on .NET Interop. I will be covering using VB, C# and F# however I have also seen this done with C++ (my C++ is far too rusty to figure it out). All posts will be using C# and the other language and will be exploring how .NET manages languages with the same programmatical paradigm (C#. VB both Object-Oriented/Imperative) and how it deals with differences in paradigm’s (C# and F#, Imperative vs Functional).\nHope you enjoy the upcoming posts!\n","permalink":"https://example.org/posts/5-dotnet-interop/","tags":null,"title":"Dotnet  Interop"},{"categories":null,"content":"Coming from web development, I have become very used to and familiar with the MVC architecture for development. It allows for good decoupling of components and also allows for excellent use of Dependency Injection (DI). Having moved to start teaching myself mobile app development through Xamarin Forms , I found the view centric approach to navigation very odd and strange. It was tightly coupled to the framework and I spent hours trying to come up with the perfect navigation service that was generic enough to use.\nLuckily for me, the team at Xamarin have done a lot of the heavy lifting with a feature introduced in Xamarin Forms 4.0 known as Xamarin Shell. This gave us a nice new way to navigate around our application using URL’s. Whilst still coupled to the framework, it makes it easier to pass parameters and allows the ability to think more similarly to the way web applications work.\nIn this repo, I created a simple proof of concept for the idea which I will describe below, feel free to have a look at the code along the way.\nSo to liken this to MVC, we will break this down into the respective parts and describe how we can transition this into the Xamarin Shell Model.\nModel:- The model part of your application does not change. It is still the simple data being stored that we all know and love from web development.\nView:- The view also does not change (at least on the Xamarin forms side of thing) And is a simple XAML File that your designers can play with until their hearts content. The only difference here is the navigation will be performed using Shell, however it is likely you will decouple this from the view (something I have not done in the demo app)\nController:- The controller of a traditional MVC app is usually handled by the framework, passing in parameters and binding them for you. This is where we have to do the most work. Firstly, the Shell Navigation uses a URL to navigate to, this then fires off the following events in order :-\nThe code behind for the target page gets bound to the parameters. These are done using Attributes provided by Xamarin which look like the following\nThis binds the parameter pass from the URL Navigation to a property in the code behind.\nIn the code behinds OnAppearing method, fire off a Request to get data needed fore the ViewModel. In the example project, I simply use the whole response form the Request, however this could be built up however you like. Think of this similar to making calls to services in a MVC application. I do this using Jimmy Bogard’s MediatR, which is resolved using Xamarin Forms built in Dependency Resolver in the code behind.\nFinally, once the calls have been made, you can create the viemodel to bind to your view which is then rendered.\nOf course to achieve this, you need to set up the DependencyService from Xamarin Forms with MediatR itself in order to achieve this simplicity. This however is no different to building up your favourite Dependency Injection container in ASP.NET MVC and setting the resolver for the Dependency Service at app startup. I do this with the package Microsoft.Extensions.DependencyInjection and using the ServiceProvider class as shown in the code below\nOnce this is set up, as MediatR uses Constructor Injection in its framework, all the services get resolved through constructor injection just as if it was a ASP.NET Controller and onward.\nThe final piece of the puzzle if for any routes which would appear outside your SHell XAML file. These include things like details pages which will need to be navigated to, but only on the press of a button and so are not part of the main App Navigation structure. For these, in the AppShell.xaml.cs file., you will need to call RegisterRoute for each page you wish to add. I set up a method I call from the constructor to do this.\nHope someone finds this useful!\n","permalink":"https://example.org/posts/4-xamarin-shell-for-web-developers/","tags":null,"title":"Xamarin Shell for Web Developers"},{"categories":null,"content":"A very leading question in the title and the answer is, of course! Nobody said you had to commit code to be part of an open source project, many people commit changes to documentation and this is where my second open source pull request(PR)/ commit lies. I was recently working on a project which is using the Prism Library (https://github.com/PrismLibrary) , a MVVM Framework for Xamarin Forms and WPF (Windows Presentation Foundation).\nWhile reading the documentation to build up and add features for our application, I found a very simple typo in the documents which irked me a bit. The document simply said ” batterly” instead of “battery” which is small but also means it takes 30 seconds to fix. So this is exactly what I did. Jumped over to the repository, navigated to the document and clicked the little icon that looks like a pencil in the top right corner (image below).\nI then made the change, and hit the big green propose file change button at the bottom.\nAnd then I had to accept the .Net Foundations Contribution Licence Agreement, seems scary but it is a form which asks a few questions and basically gets your signing to say you are allowed to contribute to the work.\nSo, no code and yet another PR accepted and under my belt. This is also a nice way to show the documentation is being used; if not for reading this to learn about the product and how to use it for this particular project, it may have stayed unnoticed for some time.\nShort and sweet this one, so thanks for reading.\n","permalink":"https://example.org/posts/2-contributing-to-open-source/","tags":null,"title":"Can contributing to open source be easy?"},{"categories":null,"content":"I always thought open source would be a scary world and the start of it was. I was shown a nice little website named First Timers Only ( https://www.firsttimersonly.com/ ), and this was my entry point. This lead me to the UpForGrabs page and I started filtering by what I knew, .NET. (Yes I skipped first contributions, if I don’t know how to do a pull request after working in industry for a year, I may be in the wrong profession)\nI found many projects I recognized very quickly, Chocolatey CLI, Fluent NHibernate, Fake It Easy and even Mono! All of the previously mentioned are massive, well known projects and if I’m honest, I thought I didn’t stand a chance with any of the issues found on their github repositories.\nVery quickly, my want to add to open source started to dwindle due to my belief in my lack of skill. So where did my first OS PR go? It went to a small start up project call Spotify-NetStandard ( https://github.com/RoguePlanetoid/Spotify-NetStandard ). Whilst I have no immediate plans for the library, I saw a talk on this and saw parts of the API I thought could be improved and so I sat down, and worked it out.\nForking the repository was easy, making my work was also easy (well apart from the XML documentation part, I’ve not done that before) but I think the biggest and hardest step is actually submitting the PR. Many thoughts went through my head, worrying that the Library maintainer would not like the code, that I hadn’t done the documentation correctly, all manner of things. But I put it in anyway.\nGetting it accepted and merged in is a massive achievement for me and is my first public commit outside of test projects and it made me feel extremely happy (think the usual kid in a candy shop simile). It also gave me an understanding as to what will drive me in future Open Source projects: doing work for features that I believe I would use. It is a big driving force as you want the feature there so you can use it in the next project or because you genuinely think it will be useful to both yourself and others. This has re-sparked my want to get further into the world of open source and work my way to bigger projects I find myself using everyday.\nIf you take one thing from this, it’s give it a try. If you’re scared of the big projects, go to meetups, meet other developers, they may have projects you can contribute to or even try starting your own. That’s my next stage, so wish me luck.\nThanks for reading.\n","permalink":"https://example.org/posts/1-my-first-pull-request/","tags":["Open Source"],"title":"My First Open Source Pull Request"},{"categories":null,"content":"","permalink":"https://example.org/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://example.org/search/_index.zh-cn/","tags":null,"title":""},{"categories":null,"content":"I was working with a SQL Server Reporting Services (SSRS) Report the other day and found myself trying to work with some data changes while writing the report to ensure the report was behaving as expected. Initially, nothing on the report changed even though I had changed the data, I found this odd and thought I might’ve been pointing at the wrong database. After a bit of googling, I found that report data get cached after the first run of previewing a report.\nIn order to force the data to update, you must delete files from within the solution directory with the extension of “.rdl.data”. I can’t remember exactly which folder this is in, however it was getting tedious going into this folder and deleting those file all the time. As such, I had some fun playing around with the “External tools” section of Visual Studio and came up with the below.\nIf you click on Tools-\u0026gt;External Tools in the top menu, click add give it a name of your choosing and use the following settings:-\nCommand: %WinDir%\\System32\\cmd.exe Arguments: /C DEL /S /Q “$(SolutionDir)*.rdl.data” WARNING: ONLY RAN ON WINDOWS – PLEASE GIVE A VS FOR MAC IMPLEMENTATION SO I CAN UPDATE IF YOU KNOW THE EQUIVELENT\nAll this says is open up cmd.exe (Command Prompt) and run the command placed into the arguments. In this case, it will Delete all “.rdl.data” files within the solution directory, and it won’t echo it out.\nYou should now have a handy button in the Tools menu with whatever you called your external tool (in my case “Remove Cached Report Data”)\nClicking this will now remove report data and you don’t have to worry about continuously jumping into the File Explorer and removing these files while testing reports, simply click this before each run and any data caching should be removed.\nHope this helps.\n","permalink":"https://example.org/posts/3-remove-cached-report-data-ssrs/","tags":null,"title":"Remove Cached Report Data Ssrs"}]