<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet Interop on Adam Parker&#39;s Blog</title>
    <link>https://example.org/tags/dotnet-interop/</link>
    <description>Recent content in Dotnet Interop on Adam Parker&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Aug 2020 22:18:08 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/dotnet-interop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dotnet Interop: C# and F# Pt. 3</title>
      <link>https://example.org/posts/9-dotnet-interop-cs-fs-pt3/</link>
      <pubDate>Sat, 29 Aug 2020 22:18:08 +0000</pubDate>
      <guid>https://example.org/posts/9-dotnet-interop-cs-fs-pt3/</guid>
      <description>&lt;p&gt;So over the last couple of posts, we’ve looked at what does work well in C# from F#, and most of it seems to go pretty smoothly. But there are occasions where the languages refuse to play nice with each other. That’s what we’ll be discussing in this final post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;&#xA;&lt;p&gt;Option in F# are a way to get around the idea of null by providing two ‘sub-types’ called Some and None. Imagine trying to parse an Int from a String, if you provide a valid string such as “42”, it succeeds and the method should return Some(42), if you provided a invalid string, it may return none to indicate that it has indeed failed. An example being as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dotnet Interop: C# and F# Pt. 2</title>
      <link>https://example.org/posts/8-dotnet-interop-cs-fs-pt2/</link>
      <pubDate>Fri, 03 Jul 2020 22:09:47 +0000</pubDate>
      <guid>https://example.org/posts/8-dotnet-interop-cs-fs-pt2/</guid>
      <description>&lt;p&gt;Continuing on from where we left off last time, we will try to cover off the rest of F#’s features that play really well and simply when being consumed from a C# codebase.&lt;/p&gt;&#xA;&lt;h2 id=&#34;values&#34;&gt;Values&lt;/h2&gt;&#xA;&lt;p&gt;F# can have values places directly inside modules, almost ‘global’ values in the module. See an example below :-&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FunctionalParadigms&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we know from the last post, modules expose themselves as static classes in C#. As such, this value just becomes a static readonly property of that static class. As such, C# can consume it as follows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dotnet Interop:- C# and F#</title>
      <link>https://example.org/posts/7-dotnet-interop-cs-fs/</link>
      <pubDate>Wed, 29 Apr 2020 22:04:54 +0000</pubDate>
      <guid>https://example.org/posts/7-dotnet-interop-cs-fs/</guid>
      <description>&lt;h2 id=&#34;what-makes-f-special&#34;&gt;What makes F# special?&lt;/h2&gt;&#xA;&lt;p&gt;In the Dotnet world, F# stand out as being the Functional based language. This might sound strange, and I on’t have time to go into the full difference between Function and Object-Oriented languages and paradigms here, please do a google if you wish to learn more.&lt;/p&gt;&#xA;&lt;p&gt;Some of the main features of F# that are relevant to this series are as follows:-&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Higher Order Functions&lt;/li&gt;&#xA;&lt;li&gt;Modules&lt;/li&gt;&#xA;&lt;li&gt;Records&lt;/li&gt;&#xA;&lt;li&gt;Sequences&lt;/li&gt;&#xA;&lt;li&gt;Discriminated Unions&lt;/li&gt;&#xA;&lt;li&gt;Options&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I put them in this order for a reason. This is the list I will be discussing and showing how the Dotnet runtime allows these two languages of different paradigms to happily (in most cases) work together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dotnet Interop:-  C# and Visual Basic</title>
      <link>https://example.org/posts/6-dotnet-interop-cs-vb/</link>
      <pubDate>Wed, 01 Apr 2020 20:47:35 +0000</pubDate>
      <guid>https://example.org/posts/6-dotnet-interop-cs-vb/</guid>
      <description>&lt;p&gt;This is Part 1 in my series of Blog Posts on DotNet interop.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-visual-basic&#34;&gt;Why Visual Basic?&lt;/h2&gt;&#xA;&lt;p&gt;I decided to use visual basic as my first way to show Interop as C# and Visual Basic both share the same programming paradigm of object orientation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-sample-of-the-languages&#34;&gt;A sample of the languages!&lt;/h2&gt;&#xA;&lt;p&gt;Below I have snippets of two classes which are mirrors of each other in both Visual Basic and C#.&lt;/p&gt;&#xA;&lt;h3 id=&#34;visual-basic&#34;&gt;Visual Basic&lt;/h3&gt;&#xA;&lt;script src=&#34;https://gist.github.com/grab-a-byte/f7d0c226dc56c8af6d10e0088b183791.js?file=MyVBClass.vb&#34;&gt;&lt;/script&gt;&#xA;&#xA;&lt;h3 id=&#34;c&#34;&gt;C#&lt;/h3&gt;&#xA;&lt;script src=&#34;https://gist.github.com/grab-a-byte/05117138274f0babd4b0a508dd1e5be4.js?file=MyCSharpClass.cs&#34;&gt;&lt;/script&gt;&#xA;&#xA;&lt;p&gt;(Those more astute of you will have notice Visual Basic’s superiority with a lack of Semi-Colons and Brackets …)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
